containers:
  user-service:
    build_directory: ./img-builder
    ports:
      - local: 8080
        container: 8080
    environment:
      API_URL: "host.docker.internal"
      KAFKA_URL: "host.docker.internal:9092"
    run_as_current_user:
      enabled: true
      home_directory: /home/user-env
    volumes:
      - local: user-service
        container: /user-service
        options: cached
      - type: cache
        name: gradle-cache
        container: /home/user-env/.gradle
    working_directory: /user-service
    dependencies:
      - user-db
  user-db:
    image: postgres:latest
    ports:
      - local: 5432
        container: 5432
    command: postgres -c wal_level=logical
    environment:
      POSTGRES_PASSWORD: "password"
      POSTGRES_HOST_AUTH_METHOD: "trust"
    volumes: 
      - type: cache
        name: backend-db
        container: /var/lib/postgresql/data
  ui-env:
    image: 'node:lts-slim'
    ports:
      - local: 3000
        container: 3000
    volumes:
      - local: UI
        container: /app
      - type: cache
        name: npm-cache
        container: /app/node_modules
    working_directory: /app
  zookeeper:
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    image: 'zookeeper:latest'
    ports:
      - '2181:2181'
  kafka:
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: 'INSIDE://kafka:9093,OUTSIDE://${ADVERTISED_LISTENER}:9092'
      KAFKA_LISTENERS: INSIDE://:9093,OUTSIDE://:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    image: 'confluentinc/cp-kafka:latest'
    ports:
      - '9092:9092'
    additional_hostnames:
      - kafka
  kafdrop:
    environment:
      KAFKA_BROKERCONNECT: kafka:9093
      JVM_OPTS: "-Xms32M -Xmx64M"
      SERVER_SERVLET_CONTEXTPATH: "/"
    image: 'obsidiandynamics/kafdrop:latest'
    ports:
      - '9000:9000'
tasks:
  run-kafka:
    run:
      container: kafdrop
    dependencies:
      - kafka
      - zookeeper
  user-db:
    run:
      container: user-db
  api-gen:
    run:
      container: user-service
      command: ./gradlew openApiGenerate
  assemble-user-service:
    run:
      container: user-service
      command: ./gradlew assemble
    prerequisites:
      - api-gen
  run-user-service:
    run:
      container: user-service
      command: ./gradlew :bootRun
  run-ui:
    run:
      container: ui-env
      command: npm run dev
  install-ui:
    run:
      container: ui-env
      command: npm install

